<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AQS概述、体系架构、属性分析(1)</title>
      <link href="/2022/03/22/AQS%E6%A6%82%E8%BF%B0,%E6%9E%B6%E6%9E%84-22/"/>
      <url>/2022/03/22/AQS%E6%A6%82%E8%BF%B0,%E6%9E%B6%E6%9E%84-22/</url>
      
        <content type="html"><![CDATA[<h2 id="AQS的概述"><a href="#AQS的概述" class="headerlink" title="AQS的概述"></a>AQS的概述</h2><p>AQS的全称是AbstractQueuedSynchronizer(抽象队列同步器),它是其他同步器组件的基础框架并且是整个JUC体系的基石,AQS是基于CLH（Craig、Landin 和 Hagersten）锁定队列的变体实现FIFO(双向队列),每一个抢占资源的线程被封装成了Node结点来实现对资源的分配,内部维护了一个同步状态变量status(private volatile int state),通过CAS的方式进行原子更新状态变量Status实现加锁解锁操作</p> <span id="more"></span><p><img src="/123131.png"></p><h2 id="AQS内部体系架构"><a href="#AQS内部体系架构" class="headerlink" title="AQS内部体系架构"></a>AQS内部体系架构</h2><p><img src="/3343.png"></p><h2 id="AQS中主要的内部类"><a href="#AQS中主要的内部类" class="headerlink" title="AQS中主要的内部类"></a>AQS中主要的内部类</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> 通过CAS的方式从尾部入队，从头部出队</span><br><span class="line">    * &lt;pre&gt;</span><br><span class="line">   *      +------+  prev +-----+       +-----+</span><br><span class="line">   * head |      | &lt;---- |     | &lt;---- |     |  tail</span><br><span class="line">   *      +------+       +-----+       +-----+</span><br><span class="line">   * &lt;/pre&gt; </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">      <span class="comment">/** 指示节点以共享模式等待的标记  */</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">SHARED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">      <span class="comment">/** 指示节点以独占模式等待的标记 */</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">EXCLUSIVE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">/** waitStatus 值指示线程已取消*/</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span> <span class="operator">=</span>  <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 标识后继节点需要唤醒</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIGNAL</span>    <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">      <span class="comment">//表示线程正在等待条件</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONDITION</span> <span class="operator">=</span> -<span class="number">2</span>;</span><br><span class="line">      <span class="comment">// 后面的共享锁需要无条件的传播</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PROPAGATE</span> <span class="operator">=</span> -<span class="number">3</span>;</span><br><span class="line">      <span class="comment">//正常同步结点，初始化值为0</span></span><br><span class="line">      <span class="comment">//waitStatus &gt; 0 取消状态</span></span><br><span class="line">      <span class="comment">// waitStatus == -1 表示当前node如果是head节点时，释放锁之后需要唤醒它的后继节点</span></span><br><span class="line">   <span class="comment">//条件结点默认时-2</span></span><br><span class="line">      <span class="keyword">volatile</span> <span class="type">int</span> waitStatus;</span><br><span class="line"><span class="comment">//前驱结点(FIFO)</span></span><br><span class="line">      <span class="keyword">volatile</span> Node prev;</span><br><span class="line">      <span class="comment">//后继结点(FIFO)</span></span><br><span class="line">      <span class="keyword">volatile</span> Node next;</span><br><span class="line">      <span class="comment">//抢占资源的线程被封装成Node结点</span></span><br><span class="line">      <span class="keyword">volatile</span> Thread thread;</span><br><span class="line">      <span class="comment">//指向下一个CONDITION状态的结点</span></span><br><span class="line">      Node nextWaiter;</span><br><span class="line">      <span class="comment">//获取前一个结点</span></span><br><span class="line">      <span class="keyword">final</span> Node <span class="title function_">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException &#123;</span><br><span class="line">          <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> prev;</span><br><span class="line">          <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//无参构造方法</span></span><br><span class="line">      Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">      &#125;</span><br><span class="line"> <span class="comment">//有参构造方法</span></span><br><span class="line">      Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">          <span class="built_in">this</span>.nextWaiter = mode;</span><br><span class="line">          <span class="built_in">this</span>.thread = thread;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Node(Thread thread, <span class="type">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">          <span class="built_in">this</span>.waitStatus = waitStatus;</span><br><span class="line">          <span class="built_in">this</span>.thread = thread;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="主要属性"><a href="#主要属性" class="headerlink" title="主要属性"></a>主要属性</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   CLH queues need a dummy header node to get started. But</span><br><span class="line">   * we don<span class="string">&#x27;t create them on construction, because it would be wasted</span></span><br><span class="line"><span class="string">   * effort if there is never contention. Instead, the node</span></span><br><span class="line"><span class="string">   * is constructed and head and tail pointers are set upon   first</span></span><br><span class="line"><span class="string">   * contention.(CLH 队列需要一个虚拟头节点才能启动。但是我们不会在构建时创建它们，因为如果从不存在争用，那将是浪费努力相反节点是在第一个争用时被构造的并且头和尾指针被设置)</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">   //指向队列的头节点</span></span><br><span class="line"><span class="string">   private transient volatile Node head;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   //指向队列的尾巴节点</span></span><br><span class="line"><span class="string">private transient volatile Node tail;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//控制加锁解锁的同步状态变量</span></span><br><span class="line"><span class="string">private volatile int state;</span></span><br></pre></td></tr></table></figure></code></pre><ul><li>注意变量使用volatile关键字修饰的原因是在多线程情况下保证共享变量的可见性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS源码-内部类Condition条件队列(3)</title>
      <link href="/2022/03/22/AQS%E6%BA%90%E7%A0%81-%E5%86%85%E9%83%A8%E7%B1%BBCondition%E7%9A%84%E7%90%86%E8%A7%A3(3)/"/>
      <url>/2022/03/22/AQS%E6%BA%90%E7%A0%81-%E5%86%85%E9%83%A8%E7%B1%BBCondition%E7%9A%84%E7%90%86%E8%A7%A3(3)/</url>
      
        <content type="html"><![CDATA[<ul><li>先看一下同步队列,条件队列，同步器三者的关系结构图(该图来自<a href="https://zhuanlan.zhihu.com/p/163621874">https://zhuanlan.zhihu.com/p/163621874</a>)</li></ul><p> <img src="/condition.png"></p><span id="more"></span><h2 id="AQS中实现Condition接口的内部类ConditionObject"><a href="#AQS中实现Condition接口的内部类ConditionObject" class="headerlink" title="AQS中实现Condition接口的内部类ConditionObject"></a>AQS中实现Condition接口的内部类ConditionObject</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionObject</span> <span class="keyword">implements</span> <span class="title class_">Condition</span>, java.io.Serializable &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1173984872572414699L</span>;</span><br><span class="line">       <span class="comment">//指向条件队列的头节点</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">transient</span> Node firstWaiter;</span><br><span class="line">       <span class="comment">//指向条件队列的尾结点</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">transient</span> Node lastWaiter;</span><br><span class="line"><span class="comment">//无参构造方法</span></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">ConditionObject</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">。。。。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="ConditionObject中最重要的方法之一await-方法"><a href="#ConditionObject中最重要的方法之一await-方法" class="headerlink" title="ConditionObject中最重要的方法之一await()方法"></a>ConditionObject中最重要的方法之一await()方法</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="comment">//判断线程是否中断</span></span><br><span class="line">           <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line"><span class="comment">//将当前线程封装成node结点,放入条件队列中去,</span></span><br><span class="line">           <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> addConditionWaiter();</span><br><span class="line"><span class="comment">//fullyRelease()释放当前线程持有的锁资源(返回值为当前线程的state值)</span></span><br><span class="line">           <span class="type">long</span> <span class="variable">savedState</span> <span class="operator">=</span> fullyRelease(node);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">interruptMode</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//判断线程结点是否在同步队列中</span></span><br><span class="line">           <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</span><br><span class="line"><span class="comment">//如果不在同步队列则阻塞当前线程</span></span><br><span class="line">               LockSupport.park(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//* private static final int REINTERRUPT =  1;</span></span><br><span class="line">        <span class="comment">//* private static final int THROW_IE    = -1;</span></span><br><span class="line"><span class="comment">//判断当前结点是否被中断</span></span><br><span class="line"><span class="comment">//即使线程发生了中断,在checkInterruptWhileWaiting方法中任然会将结点放入到同步队列中(等待去获取锁)</span></span><br><span class="line">               <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</span><br><span class="line">                   <span class="keyword">break</span>;<span class="comment">//检查线程被唤醒是否是因为被中断，如果是则跳出循环，否则会进行下一次循环，因为被唤醒前提是进入同步队列(调用singal()最终会进入到 transferForSignal()将结点放入同步队列中)，所以下一次循环也必然会跳出循环(!isOnSyncQueue(node)返回false)</span></span><br><span class="line">           &#125;</span><br><span class="line"><span class="comment">//说明当前结点已经放入到同步队列中去了</span></span><br><span class="line"><span class="comment">//acquireQueued()线程结点竞争资源</span></span><br><span class="line"><span class="comment">//条件一:返回true 表示在同步阻塞队列中 被外部线程中断唤醒过</span></span><br><span class="line"><span class="comment">//条件二: interruptMode != THROW_IE说明当前结点在条件队列中没有被中断唤醒</span></span><br><span class="line">           <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</span><br><span class="line">               interruptMode = REINTERRUPT;</span><br><span class="line"><span class="comment">//结点加入到同步队列中时nextWaiter指针没有指向为空</span></span><br><span class="line">           <span class="keyword">if</span> (node.nextWaiter != <span class="literal">null</span>) <span class="comment">// clean up if cancelled</span></span><br><span class="line"><span class="comment">//清理条件队列内取消状态的节点</span></span><br><span class="line">               unlinkCancelledWaiters();</span><br><span class="line"><span class="comment">//说明在条件队列中发生过中断</span></span><br><span class="line"><span class="comment">//1：在条件队列中发生过中断</span></span><br><span class="line"><span class="comment">//2:在同步队列中发生过中断</span></span><br><span class="line">           <span class="keyword">if</span> (interruptMode != <span class="number">0</span>)</span><br><span class="line">               reportInterruptAfterWait(interruptMode);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="addConditionWaiter-将结点加入条件队列"><a href="#addConditionWaiter-将结点加入条件队列" class="headerlink" title="addConditionWaiter()将结点加入条件队列"></a>addConditionWaiter()将结点加入条件队列</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node <span class="title function_">addConditionWaiter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//条件队列的尾结点</span></span><br><span class="line">         <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> lastWaiter;</span><br><span class="line">         <span class="comment">// If lastWaiter is cancelled, clean out.(如果尾结点被取消,则清除)</span></span><br><span class="line"><span class="comment">//条件队列中的结点waitStatus的值为-2,而同步队列中的结点waitStatus的默认值为0</span></span><br><span class="line">         <span class="keyword">if</span> (t != <span class="literal">null</span> &amp;&amp; t.waitStatus != Node.CONDITION) &#123;</span><br><span class="line"><span class="comment">//清理条件队列中所有取消状态的结点</span></span><br><span class="line">             unlinkCancelledWaiters();</span><br><span class="line"><span class="comment">//因为在unlinkCancelledWaiters()方法中,末尾结点的指向可能会发生改变所以需要更新局部标量t,为最新队尾结点的引用</span></span><br><span class="line">             t = lastWaiter;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">//将当前线程封装为结点加入到条件队列中去(waitStatus==CONDITION(-2))</span></span><br><span class="line">         <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), Node.CONDITION);</span><br><span class="line"><span class="comment">//t==null说明队列为空,那么需要更新firstWaiter指向</span></span><br><span class="line">         <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">             firstWaiter = node;</span><br><span class="line"><span class="comment">//t!=null，那么将结点插入到条件队列尾部</span></span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             t.nextWaiter = node;</span><br><span class="line"><span class="comment">//更新同步队列尾结点的指向</span></span><br><span class="line">         lastWaiter = node;</span><br><span class="line"><span class="comment">//返回当前线程封装的node结点</span></span><br><span class="line">         <span class="keyword">return</span> node;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="unlinkCancelledWaiters-清理条件队列中所有取消状态的结点"><a href="#unlinkCancelledWaiters-清理条件队列中所有取消状态的结点" class="headerlink" title="unlinkCancelledWaiters()清理条件队列中所有取消状态的结点"></a>unlinkCancelledWaiters()清理条件队列中所有取消状态的结点</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlinkCancelledWaiters</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//获取条件队列的头节点</span></span><br><span class="line">          <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> firstWaiter;</span><br><span class="line"><span class="comment">//条件队列中正常状态结点</span></span><br><span class="line">          <span class="type">Node</span> <span class="variable">trail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">          <span class="keyword">while</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//获取头节点的后继结点</span></span><br><span class="line">              <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> t.nextWaiter;</span><br><span class="line"><span class="comment">//条件队列中结点的waitStatus值默认都是-2(CONDITION),如果waitStatus！=-2说明结点为取消状态</span></span><br><span class="line">              <span class="keyword">if</span> (t.waitStatus != Node.CONDITION) &#123;</span><br><span class="line"><span class="comment">//移除waitStatus！=2的结点，将后继结点置为空(在条件队列中是单链表形式，而同步队列是双向链表)</span></span><br><span class="line">                  t.nextWaiter = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//直到本次循环仍然没有遇到正常结点</span></span><br><span class="line">                  <span class="keyword">if</span> (trail == <span class="literal">null</span>)</span><br><span class="line"><span class="comment">//更改条件队列头节点指向</span></span><br><span class="line">                      firstWaiter = next;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line"><span class="comment">//反之遇到了正常结点,那么只需要让正常结点指向取消结点的下一个结点</span></span><br><span class="line">                      trail.nextWaiter = next;</span><br><span class="line"><span class="comment">//遍历到队尾结点，更新条件队列尾结点的指向(让队尾结点指向正常结点)</span></span><br><span class="line">                  <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">                      lastWaiter = trail;</span><br><span class="line">              &#125;</span><br><span class="line"><span class="comment">//当前结点是正常结点</span></span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                  trail = t;</span><br><span class="line"><span class="comment">//将结点后移，直到t==null</span></span><br><span class="line">              t = next;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="fullyRelease-释放当前线程持有的锁资源"><a href="#fullyRelease-释放当前线程持有的锁资源" class="headerlink" title="fullyRelease()释放当前线程持有的锁资源"></a>fullyRelease()释放当前线程持有的锁资源</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="title function_">fullyRelease</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="comment">//标记当前线程释放锁是否失败</span></span><br><span class="line"><span class="comment">//1：failed---&gt;将当前结点waitStatus的值设置为取消状态,后继线程就会调用unlinkCancelledWaiters方法将取消状态的结点清除</span></span><br><span class="line"><span class="comment">//2:nofailed---&gt;返回State值</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取线程的state值</span></span><br><span class="line">           <span class="type">long</span> <span class="variable">savedState</span> <span class="operator">=</span> getState();</span><br><span class="line"><span class="comment">//判断是否释放锁成功</span></span><br><span class="line">           <span class="keyword">if</span> (release(savedState)) &#123;</span><br><span class="line"><span class="comment">//将失败标记标识为false说明nofailed</span></span><br><span class="line">               failed = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//返回当前线程的state值</span></span><br><span class="line">               <span class="keyword">return</span> savedState;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//如果当前线程释放锁失败,将当前当前结点waitStatus的值设置为取消状态，以便与回收</span></span><br><span class="line">           <span class="keyword">if</span> (failed)</span><br><span class="line">               node.waitStatus = Node.CANCELLED;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="isOnSyncQueue-方法判断结点是否在同步队列中"><a href="#isOnSyncQueue-方法判断结点是否在同步队列中" class="headerlink" title="isOnSyncQueue()方法判断结点是否在同步队列中"></a>isOnSyncQueue()方法判断结点是否在同步队列中</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isOnSyncQueue</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="comment">//首先明确一个概念prev和next都是针对同步队列结点,而nextwaitStatu才是针对条件队列结点</span></span><br><span class="line"><span class="comment">// node.waitStatus == Node.CONDITION当结点状态为CONDITION时肯定在条件队列中，node.prev==null说明一定不在同步队列中,因为同步队列中至少都有一个虚拟头节点</span></span><br><span class="line">       <span class="keyword">if</span> (node.waitStatus == Node.CONDITION || node.prev == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//node.next != null说明在同步队列中有后继结点</span></span><br><span class="line">       <span class="keyword">if</span> (node.next != <span class="literal">null</span>) <span class="comment">// If has successor, it must be on queue</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       <span class="comment">//可以想象成一个兜底方法,判断结点是否在同步队列中</span></span><br><span class="line"><span class="comment">//因为在signal()方法中的doSignal()方法中的transferForSignal()方法会将条件队列头结点加入到同步阻塞队列中,而在方法中是先用CAS将WaitStatu变量修改为0,再在end()方法中通过自旋CAS的方式将结点入队列</span></span><br><span class="line"><span class="comment">//很明显这两个CAS不能保证整体原子性,所以就会出现结点状态修改成功但是并没有加入到队列中去,这时候node.waitStatus ！= Node.CONDITION但是node.prev == null(再次注意prev是针对同步队列结点)</span></span><br><span class="line">       <span class="keyword">return</span> findNodeFromTail(node);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="findNodeFromTail-兜底方法-判断结点是否在同步队列中"><a href="#findNodeFromTail-兜底方法-判断结点是否在同步队列中" class="headerlink" title="findNodeFromTail()兜底方法,判断结点是否在同步队列中"></a>findNodeFromTail()兜底方法,判断结点是否在同步队列中</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">findNodeFromTail</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="comment">//获取同步队列尾结点</span></span><br><span class="line">       <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="comment">//找到了node结点</span></span><br><span class="line">           <span class="keyword">if</span> (t == node)</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//遍历完整个队列任然没有找到结点,返回false</span></span><br><span class="line">           <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           t = t.prev;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="checkInterruptWhileWaiting-判断结点在Condition挂起阶段是否发生了中断"><a href="#checkInterruptWhileWaiting-判断结点在Condition挂起阶段是否发生了中断" class="headerlink" title="checkInterruptWhileWaiting()判断结点在Condition挂起阶段是否发生了中断"></a>checkInterruptWhileWaiting()判断结点在Condition挂起阶段是否发生了中断</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">       * Checks for interrupt, returning THROW_IE if interrupted</span></span><br><span class="line"><span class="comment">       * before signalled, REINTERRUPT if after signalled, or</span></span><br><span class="line"><span class="comment">       * 0 if not interrupted.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">   <span class="comment">//检查中断，如果在发出信号之前被中断，则返回 THROW_IE，如果在发出信号之后返回 REINTERRUPT，如果没有中断则返回 0。</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">checkInterruptWhileWaiting</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> Thread.interrupted() ?</span><br><span class="line"><span class="comment">// transferAfterCancelledWait 这个方法只有在线程是被中断唤醒时才会调用</span></span><br><span class="line">              (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) :</span><br><span class="line">              <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="transferAfterCancelledWait-判断当前结点是否在条件队列中被中断"><a href="#transferAfterCancelledWait-判断当前结点是否在条件队列中被中断" class="headerlink" title="transferAfterCancelledWait()判断当前结点是否在条件队列中被中断"></a>transferAfterCancelledWait()判断当前结点是否在条件队列中被中断</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">transferAfterCancelledWait</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="comment">//修改结点waitStatus的值(条件成立说明一定是在条件队列中,因为singal()迁移结点时会将结点状态修改为0)</span></span><br><span class="line">      <span class="keyword">if</span> (compareAndSetWaitStatus(node, Node.CONDITION, <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="comment">//中断唤醒的node也会被加入到阻塞队列中</span></span><br><span class="line">          enq(node);</span><br><span class="line"><span class="comment">//在条件队列中被中断</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//当前node正在被外部线程调用 signal 方法将其迁移至 阻塞队列中 进行中状态</span></span><br><span class="line"><span class="comment">//Cancelling during an * incomplete transfer is both rare and transient so just</span></span><br><span class="line">       spin(在不完整的传输过程中取消既罕见又短暂,所以只是调用yield方法)</span><br><span class="line"><span class="comment">//yield()方法是暂停当前正在执行的线程，并执行其他线程,与sleep方法最大的区别就是yield是回到可运行状态使当前线程重新抢占cpu,而sleeps()是使得线程阻塞</span></span><br><span class="line">      <span class="keyword">while</span> (!isOnSyncQueue(node))</span><br><span class="line">          Thread.yield();</span><br><span class="line"><span class="comment">//被中断唤醒不是在条件队列中</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="reportInterruptAfterWait"><a href="#reportInterruptAfterWait" class="headerlink" title="reportInterruptAfterWait()"></a>reportInterruptAfterWait()</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reportInterruptAfterWait</span><span class="params">(<span class="type">int</span> interruptMode)</span></span><br><span class="line">           <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="comment">/// 条件成立：说明在条件队列内发生过中断，此时await方法抛出中断异常</span></span><br><span class="line">           <span class="keyword">if</span> (interruptMode == THROW_IE)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line"><span class="comment">// 在同步队列中发生中断</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (interruptMode == REINTERRUPT)</span><br><span class="line">               selfInterrupt();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="signal-线程唤醒方法"><a href="#signal-线程唤醒方法" class="headerlink" title="signal()线程唤醒方法"></a>signal()线程唤醒方法</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">signal</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">//判断调用signal方法的线程是否是独占锁持有线程，如果不是，直接抛出异常</span></span><br><span class="line">   <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line">  <span class="comment">//获取条件队列头节点</span></span><br><span class="line">   <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> firstWaiter;</span><br><span class="line">   <span class="keyword">if</span> (first != <span class="literal">null</span>)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">       doSignal(first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="doSignal-将条件队列首节点进行迁移"><a href="#doSignal-将条件队列首节点进行迁移" class="headerlink" title="doSignal()将条件队列首节点进行迁移"></a>doSignal()将条件队列首节点进行迁移</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSignal</span><span class="params">(Node first)</span> &#123;</span><br><span class="line">           <span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//如果首节点的后继结点为null,说明条件队列中只有一个结点对象,那么在首节点迁移到同步队列中时需要将条件队列的尾结点置为null</span></span><br><span class="line">               <span class="keyword">if</span> ( (firstWaiter = first.nextWaiter) == <span class="literal">null</span>)</span><br><span class="line">                   lastWaiter = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//将条件队列首节点断开与后继结点的连接</span></span><br><span class="line">               first.nextWaiter = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//迁移条件队列首节点在同步队列中去</span></span><br><span class="line"><span class="comment">//当前first迁移失败，则将first更新为 first.next 继续尝试迁移</span></span><br><span class="line">           &#125; <span class="keyword">while</span> (!transferForSignal(first) &amp;&amp;</span><br><span class="line">                    (first = firstWaiter) != <span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="transferForSignal-将当前节点迁移到同步队列"><a href="#transferForSignal-将当前节点迁移到同步队列" class="headerlink" title="transferForSignal()将当前节点迁移到同步队列"></a>transferForSignal()将当前节点迁移到同步队列</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回true 表示当前first节点迁移到阻塞队列成功  返回false 表示迁移失败</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">transferForSignal</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">       <span class="comment">// If cannot change waitStatus, the node has been cancelled.(如果无法更改waitStatus，则节点已被取消)</span></span><br><span class="line">       <span class="keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="number">0</span>))</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//将node以自旋CAS方式添加到AQS队尾，返回的是当前结点在同步队列中的前驱结点</span></span><br><span class="line">       <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> enq(node);</span><br><span class="line">       <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> p.waitStatus;</span><br><span class="line"><span class="comment">//条件一:ws &gt; 0 成立：说明前驱节点的状态在阻塞队列中是 取消状态,唤醒当前节点</span></span><br><span class="line"><span class="comment">//条件二:ws&lt;=0，那么需要将新加入节点的前驱节点waitstatus设置为Node.SIGNAL</span></span><br><span class="line">       <span class="keyword">if</span> (ws &gt; <span class="number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</span><br><span class="line"><span class="comment">//上述条件都失败，则唤醒线程</span></span><br><span class="line">           LockSupport.unpark(node.thread);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS源码-重要的成员方法(2)</title>
      <link href="/2022/03/22/AQS%E6%BA%90%E7%A0%81-%E9%87%8D%E8%A6%81%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/"/>
      <url>/2022/03/22/AQS%E6%BA%90%E7%A0%81-%E9%87%8D%E8%A6%81%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="从acquire方法-线程竞争获取资源"><a href="#从acquire方法-线程竞争获取资源" class="headerlink" title="从acquire方法(线程竞争获取资源)"></a>从acquire方法(线程竞争获取资源)</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//* Attempts to acquire in exclusive mode.（tryAcquire方法尝试以独占方式获取锁)</span></span><br><span class="line"><span class="comment">//* Creates and enqueues node for current thread and given mode(addWaiter方法将当前线程封装成Node结点取获取锁)</span></span><br><span class="line"><span class="comment">// acquireQueued(让当前线程以自旋的方式不断的去获取锁资源,该方法还包括抢占锁资源失败后挂起当前线程、线程唤醒后相关的逻辑)</span></span><br><span class="line"><span class="comment">// selfInterrupt()中断当前线程</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">           acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">           selfInterrupt();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><span id="more"></span><h2 id="tryAcquire方法"><a href="#tryAcquire方法" class="headerlink" title="tryAcquire方法"></a>tryAcquire方法</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//Reentrantlock中FairSync公平获锁（位于ReentrantLock类的静态内部类Sync中）</span></span><br><span class="line"><span class="comment">// 返回true -&gt; 尝试获取锁成功 | 返回false -&gt; 尝试获取锁失败</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line"><span class="comment">//获取当前线程</span></span><br><span class="line">          <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line"><span class="comment">//返回同步状态当前值</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line"><span class="comment">//当c==0时说明处于无锁状态</span></span><br><span class="line"><span class="comment">//hasQueuedPredecessors()判断FIFO队列中是否有排队的线程</span></span><br><span class="line"><span class="comment">//返回true ---&gt; 说明当前队列中有排队的线程,当前线程需要入队等待(!tryAcquire(arg)&amp;&amp;acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span></span><br><span class="line"><span class="comment">//返回false ---&gt;说明当前队列中没有排队的线程,当前线程可以尝试去获取锁资源</span></span><br><span class="line">          <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">        <span class="comment">//compareAndSetState(0, acquires)以CAS原子性的方式去修改Status的值</span></span><br><span class="line">              <span class="comment">// 返回true ---&gt; 说明status更新成功，成功抢占到了锁资源</span></span><br><span class="line"><span class="comment">// 返回false---&gt; 说明status更新失败，有多个线程存在竞争锁资源,当前线程竞争失败</span></span><br><span class="line">                  compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">              <span class="comment">//当队列中既没有排队线程并且当前线程抢占到了锁资源，那么设置当前线程拥有独占访问的权限</span></span><br><span class="line">                  setExclusiveOwnerThread(current);</span><br><span class="line"><span class="comment">//当前线程获取锁资源成功</span></span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">// * Returns the thread last set by &#123;@code setExclusiveOwnerThread&#125;,or &#123;@code null&#125; if never set</span></span><br><span class="line">          <span class="comment">// 进入当前if语句的前提c！=0,说明锁资源被抢占,因为可重入锁的原因,已经获取锁的线程可以再次进入。</span></span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line"><span class="comment">//将获取锁资源的次数加上acquires值</span></span><br><span class="line">              <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line"><span class="comment">//越界判断</span></span><br><span class="line">              <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line"><span class="comment">//更新同步状态的值(state = newState  newState为形参值，当前就是nextc)</span></span><br><span class="line">              setState(nextc);</span><br><span class="line"><span class="comment">//获取锁资源成功</span></span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">//1:CAS加锁失败</span></span><br><span class="line"><span class="comment">//2:Staus!=0&amp;&amp;当前线程不是占有锁资源的线程</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>Reentrantlock中NonfairSync非公平锁</p><pre><code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">nonfairTryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line"><span class="comment">//获取当前线程</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line"><span class="comment">//获取同步状态值</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line"><span class="comment">//此处是公平锁和非公平锁不同的点,非公平锁直接尝试去CAS原子性修改Status值,而非公平锁需要先去判断队列中是否有等待线程</span></span><br><span class="line">      <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">              setExclusiveOwnerThread(current);</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//可重入锁情况</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line"><span class="comment">//越界处理</span></span><br><span class="line">          <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line"><span class="comment">//更新同步状态的值</span></span><br><span class="line">          setState(nextc);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//1:CAS抢占锁资源失败</span></span><br><span class="line"><span class="comment">//2:Staus!=0&amp;&amp;当前线程不是占有锁资源的线程</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="hasQueuedPredecessors判断当前同步队列中是否有等待的线程"><a href="#hasQueuedPredecessors判断当前同步队列中是否有等待的线程" class="headerlink" title="hasQueuedPredecessors判断当前同步队列中是否有等待的线程"></a>hasQueuedPredecessors判断当前同步队列中是否有等待的线程</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">hasQueuedPredecessors</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; </span><br><span class="line">       <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">       Node s;</span><br><span class="line"><span class="comment">//头节点==尾结点说明当前队列中只有一个初始化的虚拟头节点</span></span><br><span class="line">       <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">           ((s = h.next) == <span class="literal">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="addWaiter将当前线程添加到阻塞队列"><a href="#addWaiter将当前线程添加到阻塞队列" class="headerlink" title="addWaiter将当前线程添加到阻塞队列"></a>addWaiter将当前线程添加到阻塞队列</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line"><span class="comment">//将当前线程封装为Node结点,mode表示结点的模式(独占(EXCLUSIVE),共享(SHARED))</span></span><br><span class="line">       <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line">       <span class="comment">//获取队列尾结点</span></span><br><span class="line">       <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line">       <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//将当前结点前驱结点设置为pred</span></span><br><span class="line">           node.prev = pred;</span><br><span class="line"><span class="comment">//以CAS的方式去修改尾结点</span></span><br><span class="line">           <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line"><span class="comment">//  pred &lt;---node</span></span><br><span class="line"><span class="comment">//  pred ---&gt;node 完成双向绑定</span></span><br><span class="line">               pred.next = node;</span><br><span class="line">               <span class="keyword">return</span> node;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//自旋的方式入队列</span></span><br><span class="line"><span class="comment">//进入自旋的前提条件1:当前队列是空队列  2:CAS修改尾结点失败说明存在多线程竞争</span></span><br><span class="line">       enq(node);</span><br><span class="line">       <span class="keyword">return</span> node;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="enq以自旋的方式将node结点入队列"><a href="#enq以自旋的方式将node结点入队列" class="headerlink" title="enq以自旋的方式将node结点入队列"></a>enq以自旋的方式将node结点入队列</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node <span class="title function_">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> &#123;</span><br><span class="line"><span class="comment">//死循环,自旋操作</span></span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="comment">//获取尾结点</span></span><br><span class="line">          <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line"><span class="comment">//尾结点为空--&gt;队列为空(CLH queues need a dummy header node to get started)从注释上可以得出,CLH队列启动需要一个虚拟头节点，所以作为第一个node结点需要帮助创建一个head结点,head是真正持有锁的线程</span></span><br><span class="line"><span class="comment">//不过head结点是一个空结点仅仅标识当前有线程占有state,真正标识到底是那个线程持有锁是在exclusiveOwnerThread属性里</span></span><br><span class="line">          <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">              <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> <span class="title class_">Node</span>()))</span><br><span class="line">                  tail = head;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//当前队列不为空,通过CAS的方式修改尾结点</span></span><br><span class="line">              node.prev = t;</span><br><span class="line">              <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                  t.next = node;</span><br><span class="line">                  <span class="keyword">return</span> t;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="acquireQueued"><a href="#acquireQueued" class="headerlink" title="acquireQueued"></a>acquireQueued</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AQS中真正去竞争锁资源的方法</span></span><br><span class="line"><span class="comment">//返回值true表示线程等待时被中断，返回值false未被中断唤醒</span></span><br><span class="line"><span class="comment">// if (!tryAcquire(arg) </span></span><br><span class="line">   <span class="comment">//        &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) </span></span><br><span class="line">   <span class="comment">//     selfInterrupt();</span></span><br><span class="line"><span class="comment">// 当返回true时会执行selfInterrupt()也即是中断当前线程,所以正常情况下应该返回false</span></span><br><span class="line"> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="type">int</span> arg)</span> &#123;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//中断标记</span></span><br><span class="line">           <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">           <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="comment">//获取当前结点的前驱结点</span></span><br><span class="line">               <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line"><span class="comment">//注意，阻塞队列不包含head节点，head指的是占有锁的线程，head后面的才称为阻塞队列</span></span><br><span class="line"><span class="comment">//如果前驱结点为head结点,则尝试获取锁资源</span></span><br><span class="line">               <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                   setHead(node);</span><br><span class="line">                   p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line"><span class="comment">// 当前线程获取锁的过程中，没有发生异常</span></span><br><span class="line">                   failed = <span class="literal">false</span>;</span><br><span class="line">                   <span class="keyword">return</span> interrupted;<span class="comment">//返回中断标志</span></span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">//shouldParkAfterFailedAcquire()方法判断当前线程是否需要挂起</span></span><br><span class="line"><span class="comment">//parkAndCheckInterrupt()真正执行挂起的方法,底层调用UNSAFE.park来实现挂起</span></span><br><span class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                   parkAndCheckInterrupt())</span><br><span class="line"><span class="comment">//当前线程被唤醒后,将中断标志设置为true,表示当前线程被中断信号唤醒</span></span><br><span class="line">                   interrupted = <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//什么时候failed为true？</span></span><br><span class="line"><span class="comment">//当tryAcquire(arg)抛出异常时</span></span><br><span class="line">           <span class="keyword">if</span> (failed)</span><br><span class="line"> <span class="comment">// node节点的取消线程资源竞争</span></span><br><span class="line">               cancelAcquire(node);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="setHead方法"><a href="#setHead方法" class="headerlink" title="setHead方法"></a>setHead方法</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//将抢占到锁的结点设置为新的虚拟头节点,头节点是不保存线程信息的，保存抢占到锁资源的线程信息是在tryAcquire方法中的setExclusiveOwnerThread(current);</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">     head = node;</span><br><span class="line">     node.thread = <span class="literal">null</span>;</span><br><span class="line">     node.prev = <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="shouldParkAfterFailedAcquire判断当前线程获取锁资源失败后是否需要挂起"><a href="#shouldParkAfterFailedAcquire判断当前线程获取锁资源失败后是否需要挂起" class="headerlink" title="shouldParkAfterFailedAcquire判断当前线程获取锁资源失败后是否需要挂起"></a>shouldParkAfterFailedAcquire判断当前线程获取锁资源失败后是否需要挂起</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//waitStatus==0 默认状态 waitStatus==-1(Signal状态--表示当前线程释放锁后会唤醒后继结点)</span></span><br><span class="line"><span class="comment">//waitStatus==1 结点取消排队(CANCELLED)</span></span><br><span class="line"><span class="comment">// 参数1：Node pred 当前线程的前驱节点</span></span><br><span class="line"><span class="comment">// 参数2：Node node 封装当前线程的节点</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> pred.waitStatus;</span><br><span class="line">       <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">          <span class="comment">//如果前驱结点的waitStatus为-1,表示当前结点能获取到唤醒机会,返回ture(然后就可以调用parkAndCheckInterrupt方法被挂起)</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//ws&gt;0表示前驱结点已经取消,那么当前结点就需要找一个能让他唤醒的前驱结点</span></span><br><span class="line">       <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">do</span> &#123;</span><br><span class="line">               node.prev = pred = pred.prev;</span><br><span class="line">           &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">           pred.next = node;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//当前node前驱节点的状态就是0，即默认状态这种情况</span></span><br><span class="line"><span class="comment">// 将当前线程node的前驱节点的状态，强制设置为SIGNAL，表示该节点释放锁后会唤醒它的第一个后驱节点</span></span><br><span class="line">           compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//方法结束,当再次进入当前方法后会进入第一个if语句,表明当前结点能获取到唤醒机会,返回ture(然后就可以调用parkAndCheckInterrupt方法被挂起)</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="parkAndCheckInterrupt-挂起当前线程的方法"><a href="#parkAndCheckInterrupt-挂起当前线程的方法" class="headerlink" title="parkAndCheckInterrupt()挂起当前线程的方法"></a>parkAndCheckInterrupt()挂起当前线程的方法</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//挂起方法,让当前线程被挂起,等待被唤醒</span></span><br><span class="line"><span class="comment">// 底层调用UNSAFE.park</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">parkAndCheckInterrupt</span><span class="params">()</span> &#123;</span><br><span class="line">       LockSupport.park(<span class="built_in">this</span>);</span><br><span class="line">       <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="release释放锁的逻辑"><a href="#release释放锁的逻辑" class="headerlink" title="release释放锁的逻辑"></a>release释放锁的逻辑</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line"><span class="comment">//tryRelease尝试去释放锁</span></span><br><span class="line">       <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line"><span class="comment">//双向链表的头节点,head结点为真正持有锁的结点</span></span><br><span class="line">           <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">           <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">               unparkSuccessor(h);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li>什么时候会进入到if语句中去呢?</li></ul><ul><li>个人理解是当当前线程持有锁时，会有一个node结点作为虚拟头节点作为当前持有锁的一个标识，然后其余的线程来竞争锁会进入到tryAcquire()方法中，因为当前线程并没有释放锁，那么加锁肯定不会成功，那么其余线程封装的node结点就会进入队列，然后去抢占锁资源，在锁没有释放这个过程中，其余线程无法抢占到锁资源，就会去判断是否需要挂起等待，在shouldParkAfterFailedAcquire()判断是否需要挂起,在方法中头节点的后继结点就会将头节点通过compareAndSetWaitStatus(pred, ws, Node.SIGNAL)方法将头结点节waitStatus&#x3D;&#x3D;0修改为waitStatus&#x3D;&#x3D;-1,然后当调用release()方法后就会进入到if判断语句中，去唤醒头结点的后继结点(非取消结点)</li></ul><ul><li>线程解锁有三种情况:<ul><li>当前线程不在AQS队列中,那么直接进入tryRelease方法尝试去释放锁,并且如果当前不是可重入锁,将当前线程的独占标识去掉,如果是可重入锁则statu的值减一,当statu的值等于0时表明解锁成功、<ul><li>AQS队列中只有一个结点，这时候tryRelease的逻辑跟第一种情况相同，然后会进入到if语句中来进行判断,判断头节点是否为空以及同步队列中头节点的waitStatus是否等于0，显然只有一个结点waitStatus就为0，if判断不成立，不会执行unpark的方法。会直接返回true。表示解锁成功。</li></ul></li><li>AQS队列中不止一个结点，这个时候tryRelease()返回的结果和上面的情况是一样的。这个时候返回的true，会进当前的if中去，然后判断头结点是不是为null和头结点中waitStatus的值是不是等于0。这个时候head不等于null，但是waitState是等于-1，if判断成立，会执行unpark的方法。unpark方法中会unpark头结点的下一个节点，然后如果当前的节点的状态是取消的状态，会从最后一个节点开始找，找到当前节点的下一个不是取消状态的节点进行unpark。这个时候也会直接返回true。表示解锁成功。</li></ul></li></ul><h2 id="tryRelease尝试去释放锁"><a href="#tryRelease尝试去释放锁" class="headerlink" title="tryRelease尝试去释放锁"></a>tryRelease尝试去释放锁</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line"><span class="comment">//c代表当前线程的statu同步状态值 statu&gt;0表示被线程获取多次,当statu==0时说明当前线程不能持有锁,锁资源应该释放</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState() - releases;</span><br><span class="line"><span class="comment">//如果当前线程不是最后获取锁的线程则抛出异常(不是当前持有锁的线程)</span></span><br><span class="line">          <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line"><span class="comment">//当前线程是否可以完全释放锁</span></span><br><span class="line">          <span class="type">boolean</span> <span class="variable">free</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//statu==0表示当前线程已经达到完全释放锁的条件</span></span><br><span class="line">          <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//当前线程可以完全释放锁</span></span><br><span class="line">              free = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 更新当前持锁线程为null</span></span><br><span class="line">              setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">//更新同步状态值</span></span><br><span class="line">          setState(c);</span><br><span class="line">          <span class="keyword">return</span> free;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="unparkSuccessor唤醒结点的后继者"><a href="#unparkSuccessor唤醒结点的后继者" class="headerlink" title="unparkSuccessor唤醒结点的后继者"></a>unparkSuccessor唤醒结点的后继者</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unparkSuccessor</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">       <span class="comment">//获取当前结点的waitStatus值</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> node.waitStatus;</span><br><span class="line">       <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">//将waitStatus的值通过擦拭的方式修改为0,是因为waitStatus = SIGNAL（&lt; -1）或 PROPAGATE（-·3） 只是一个标志，代表在此状态下，后继节点可以唤醒,那么唤醒完后自然可以设置为0。</span></span><br><span class="line">           compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line">      <span class="comment">//获取结点的后继结点</span></span><br><span class="line">       <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.next;</span><br><span class="line"><span class="comment">//s 状态为非空，或者其为取消状态，说明 s 是无效节点,从后往前寻找离当前结点最近的非取消结点</span></span><br><span class="line">       <span class="keyword">if</span> (s == <span class="literal">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           s = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; t != <span class="literal">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">               <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                   s = t;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (s != <span class="literal">null</span>)</span><br><span class="line">           LockSupport.unpark(s.thread);<span class="comment">//唤醒线程</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>为什么是从后往前遍历呢,从前往后不是更快吗？</p></li><li><pre><code class="Java"> node.prev = pred;        if (compareAndSetTail(pred, node)) &#123;            pred.next = node;            return node;        &#125;</code></pre></li><li><p>1：将node的前驱结点设置为同步队列的尾结点</p></li><li><p>2:CAS原子性的去更新同步队列尾结点为node结点</p></li><li><p>3:将老的尾结点的后继结点设置为node结点</p></li><li><p>从addWaiter将结点加入队列中的代码可知,上述三步操作很明显不是原子性操作，当大量线程执行上述代码只有一个线程能够修改成功完成上述步骤,其余线程就会入下图所示没有老的尾结点到达新尾结点的指针指向,所以综上考虑使用从后往前遍历。</p></li><li><p>图片来自 <a href="https://blog.csdn.net/xad669475795/article/details/123455635">https://blog.csdn.net/xad669475795/article/details/123455635</a><br><img src="/343.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_2022/3/22</title>
      <link href="/2022/03/22/leetcode-2022-3-22/"/>
      <url>/2022/03/22/leetcode-2022-3-22/</url>
      
        <content type="html"><![CDATA[<ul><li>时间复杂度:遍历数组O(N),交换索引下标值O(1),所以时间复杂度为O(1)</li><li>空间复杂度:常数级常数级额外空间<h2 id="剑指-Offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a>剑指 Offer 03. 数组中重复的数字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRepeatNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(i &lt; nums.length) &#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[i] == i) &#123;<span class="comment">//当索引值等于索引列下标值时说明不存在重复元素跳过</span></span><br><span class="line">              i++;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(nums[nums[i]] == nums[i]) <span class="keyword">return</span> nums[i];<span class="comment">//当索引下标下有元素时，并且相同说明找到相同元素</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];<span class="comment">//交换索引对于的值</span></span><br><span class="line">          nums[i] = nums[tmp];</span><br><span class="line">          nums[tmp] = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><ul><li><p>时间复杂度: O(n)的时间复杂度</p></li><li><p>滑动窗口</p><h2 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;s.length();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(s.charAt(j))) i = Math.max(map.get(s.charAt(j)),i);<span class="comment">//因为相同字符如果在i左边不需要管,只需要考虑在i右边相同的字符串并且跳过</span></span><br><span class="line">              map.put(s.charAt(j),j+<span class="number">1</span>);<span class="comment">//设置value为j+1主要是为了在滑动窗口收缩窗口时，将i变成相同字符右移一位</span></span><br><span class="line">              count = Math.max(j-i+<span class="number">1</span>,count);<span class="comment">//返回长度</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双重递归</p><h2 id="剑指-Offer-26-树的子结构"><a href="#剑指-Offer-26-树的子结构" class="headerlink" title="剑指 Offer 26. 树的子结构"></a>剑指 Offer 26. 树的子结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="comment">//递归处理  前序遍历子树a然后处理每一个节点</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(A==<span class="literal">null</span>||B==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">return</span> isDou(A,B)||isSubStructure(A.left,B)||isSubStructure(A.right,B);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDou</span><span class="params">(TreeNode A,TreeNode B)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(B==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//B树是A的子树，遍历完成</span></span><br><span class="line">      <span class="keyword">if</span>(A==<span class="literal">null</span>||A.val!=B.val)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//当a,b树节点值不相同时或者a树为空时说明b不是a的子节点</span></span><br><span class="line">      <span class="keyword">return</span> isDou(A.left,B.left)&amp;&amp;isDou(A.right,B.right);<span class="comment">//递归处理</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如果是求A中有多少个子结构和B相同，代码如下</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">isSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(A==<span class="literal">null</span>||B==<span class="literal">null</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//边界条件</span></span><br><span class="line">    <span class="keyword">if</span>(isDou(A,B)) count++;<span class="comment">//如果是计数++</span></span><br><span class="line">    isSubStructure(A.left,B);<span class="comment">//递归左子树</span></span><br><span class="line">    isSubStructure(A.right,B);<span class="comment">//递归右子树</span></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDou</span><span class="params">(TreeNode A,TreeNode B)</span>&#123;<span class="comment">//判断B是不是A的子树</span></span><br><span class="line">    <span class="keyword">if</span>(B==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//B树是A的子树，遍历完成</span></span><br><span class="line">    <span class="keyword">if</span>(A==<span class="literal">null</span>||A.val!=B.val)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//说明B不为空并且a为空，或者两值不相等</span></span><br><span class="line">    <span class="keyword">return</span> isDou(A.left,B.left)&amp;&amp;isDou(A.right,B.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_2022/3/23</title>
      <link href="/2022/03/22/leetcode-2022-3-23/"/>
      <url>/2022/03/22/leetcode-2022-3-23/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-34-二叉树中和为某一值的路径"><a href="#剑指-Offer-34-二叉树中和为某一值的路径" class="headerlink" title="剑指 Offer 34. 二叉树中和为某一值的路径"></a>剑指 Offer 34. 二叉树中和为某一值的路径</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   List&lt;List&lt;Integer&gt;&gt; list_1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">   LinkedList&lt;Integer&gt; list_2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">      dfs(root,target);</span><br><span class="line">      <span class="keyword">return</span> list_1;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>)<span class="keyword">return</span>;</span><br><span class="line">       target-=root.val;</span><br><span class="line">      list_2.add(root.val);</span><br><span class="line">      <span class="keyword">if</span>(root.left==<span class="literal">null</span>&amp;&amp;root.right==<span class="literal">null</span>&amp;&amp;target==<span class="number">0</span>) &#123;</span><br><span class="line">        list_1.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(list_2));<span class="comment">//不能提前return会导致队列二无法回溯导致结果不对</span></span><br><span class="line">      &#125;</span><br><span class="line">      dfs(root.left,target);</span><br><span class="line">      dfs(root.right,target);</span><br><span class="line">      <span class="comment">// target-=root.val;为什么不需要再加上root.val，因为Java是值传递,是将实参复制一份传给函数,在函数里修改并不影响实参,所以加不加都没影响</span></span><br><span class="line">      list_2.removeLast();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="剑指-Offer-29-顺时针打印矩阵"><a href="#剑指-Offer-29-顺时针打印矩阵" class="headerlink" title="剑指 Offer 29. 顺时针打印矩阵"></a>剑指 Offer 29. 顺时针打印矩阵</h2><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span>[] spiralOrder(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">      <span class="keyword">if</span>(matrix.length==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>,r = matrix[<span class="number">0</span>].length-<span class="number">1</span>,b = matrix.length-<span class="number">1</span>,t = <span class="number">0</span> ,x =<span class="number">0</span>  ;</span><br><span class="line">       <span class="type">int</span> res[] = <span class="keyword">new</span> <span class="title class_">int</span>[(b+<span class="number">1</span>)*(r+<span class="number">1</span>)];</span><br><span class="line">       <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l; i &lt;= r; i++) res[x++] = matrix[t][i]; <span class="comment">// 从左往右遍历</span></span><br><span class="line">           <span class="keyword">if</span>(++t &gt; b) <span class="keyword">break</span>;<span class="comment">//边界条件收缩,行数向下收缩t++,如果大于b,结束循环返回</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> t; i &lt;= b; i++) res[x++] = matrix[i][r]; <span class="comment">// 从上往下遍历</span></span><br><span class="line">           <span class="keyword">if</span>(l &gt; --r) <span class="keyword">break</span>;<span class="comment">//边界条件收缩,列数向左搜索</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> r; i &gt;= l; i--) res[x++] = matrix[b][i]; <span class="comment">// 从右往左</span></span><br><span class="line">           <span class="keyword">if</span>(t &gt; --b) <span class="keyword">break</span>;<span class="comment">//边界条件收缩,行数向上收缩</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b; i &gt;= t; i--) res[x++] = matrix[i][l]; <span class="comment">// 从下往上.</span></span><br><span class="line">           <span class="keyword">if</span>(++l &gt; r) <span class="keyword">break</span>;<span class="comment">//边界条件收缩,列数向右收缩</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
