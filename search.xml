<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AQS概述、体系架构、属性分析</title>
      <link href="/2022/03/22/AQS%E6%A6%82%E8%BF%B0,%E6%9E%B6%E6%9E%84-22/"/>
      <url>/2022/03/22/AQS%E6%A6%82%E8%BF%B0,%E6%9E%B6%E6%9E%84-22/</url>
      
        <content type="html"><![CDATA[<p>##AQS的概述<br>AQS的全称是AbstractQueuedSynchronizer(抽象队列同步器),它是其他同步器组件的基础框架并且是整个JUC体系的基石,AQS是基于CLH（Craig、Landin 和 Hagersten）锁定队列的变体实现FIFO(双向队列),每一个抢占资源的线程被封装成了Node结点来实现对资源的分配,内部维护了一个同步状态变量status(private volatile int state),通过CAS的方式进行原子更新状态变量Status实现加锁解锁操作</p> <span id="more"></span><p><img src="http://r95hnmq9s.hn-bkt.clouddn.com/123131.png" alt="RUNOOB 图标"></p><p>##AQS内部体系架构<br><img src="http://r95hnmq9s.hn-bkt.clouddn.com/3343.png" alt="RUNOOB 图标"></p><p>##AQS中主要的内部类<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> 通过CAS的方式从尾部入队，从头部出队</span><br><span class="line">    * &lt;pre&gt;</span><br><span class="line">   *      +------+  prev +-----+       +-----+</span><br><span class="line">   * head |      | &lt;---- |     | &lt;---- |     |  tail</span><br><span class="line">   *      +------+       +-----+       +-----+</span><br><span class="line">   * &lt;/pre&gt; </span><br><span class="line">   static final class Node &#123;</span><br><span class="line">      /** 指示节点以共享模式等待的标记  */</span><br><span class="line">      static final Node SHARED = new Node();</span><br><span class="line">      /** 指示节点以独占模式等待的标记 */</span><br><span class="line">      static final Node EXCLUSIVE = null;</span><br><span class="line">      /** waitStatus 值指示线程已取消*/</span><br><span class="line">      static final int CANCELLED =  1;</span><br><span class="line">      // 标识后继节点需要唤醒</span><br><span class="line">      static final int SIGNAL    = -1;</span><br><span class="line">      //表示线程正在等待条件</span><br><span class="line">      static final int CONDITION = -2;</span><br><span class="line">      // 后面的共享锁需要无条件的传播</span><br><span class="line">      static final int PROPAGATE = -3;</span><br><span class="line">      //正常同步结点，初始化值为0</span><br><span class="line">      //waitStatus &gt; 0 取消状态</span><br><span class="line">      // waitStatus == -1 表示当前node如果是head节点时，释放锁之后需要唤醒它的后继节点</span><br><span class="line">      volatile int waitStatus;</span><br><span class="line">//前驱结点(FIFO)</span><br><span class="line">      volatile Node prev;</span><br><span class="line">      //后继结点(FIFO)</span><br><span class="line">      volatile Node next;</span><br><span class="line">      //抢占资源的线程被封装成Node结点</span><br><span class="line">      volatile Thread thread;</span><br><span class="line">      //指向下一个CONDITION状态的结点</span><br><span class="line">      Node nextWaiter;</span><br><span class="line">      //获取前一个结点</span><br><span class="line">      final Node predecessor() throws NullPointerException &#123;</span><br><span class="line">          Node p = prev;</span><br><span class="line">          if (p == null)</span><br><span class="line">              throw new NullPointerException();</span><br><span class="line">          else</span><br><span class="line">              return p;</span><br><span class="line">      &#125;</span><br><span class="line">      //无参构造方法</span><br><span class="line">      Node() &#123;    // Used to establish initial head or SHARED marker</span><br><span class="line">      &#125;</span><br><span class="line"> //有参构造方法</span><br><span class="line">      Node(Thread thread, Node mode) &#123;     // Used by addWaiter</span><br><span class="line">          this.nextWaiter = mode;</span><br><span class="line">          this.thread = thread;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Node(Thread thread, int waitStatus) &#123; // Used by Condition</span><br><span class="line">          this.waitStatus = waitStatus;</span><br><span class="line">          this.thread = thread;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>##主要属性</p><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   CLH queues need a dummy header node to get started. But</span><br><span class="line">   * we don&#x27;t create them on construction, because it would be wasted</span><br><span class="line">   * effort if there is never contention. Instead, the node</span><br><span class="line">   * is constructed and head and tail pointers are set upon   first</span><br><span class="line">   * contention.(CLH 队列需要一个虚拟头节点才能启动。但是我们不会在构建时创建它们，因为如果从不存在争用，那将是浪费努力相反节点是在第一个争用时被构造的并且头和尾指针被设置)</span><br><span class="line">  </span><br><span class="line">   //指向队列的头节点</span><br><span class="line">   private transient volatile Node head;</span><br><span class="line"></span><br><span class="line">   //指向队列的尾巴节点</span><br><span class="line">private transient volatile Node tail;</span><br><span class="line"></span><br><span class="line">//控制加锁解锁的同步状态变量</span><br><span class="line">private volatile int state;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><ul><li>注意变量使用volatile关键字修饰的原因是在多线程情况下保证共享变量的可见性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS源码-重要的成员方法</title>
      <link href="/2022/03/22/AQS%E6%BA%90%E7%A0%81-%E9%87%8D%E8%A6%81%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/"/>
      <url>/2022/03/22/AQS%E6%BA%90%E7%A0%81-%E9%87%8D%E8%A6%81%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>##从acquire方法(线程竞争获取资源)<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   //* Attempts to acquire in exclusive mode.（tryAcquire方法尝试以独占方式获取锁)</span><br><span class="line">//* Creates and enqueues node for current thread and given mode(addWaiter方法将当前线程封装成Node结点取获取锁)</span><br><span class="line">// acquireQueued(让当前线程以自旋的方式不断的去获取锁资源,该方法还包括抢占锁资源失败后挂起当前线程、线程唤醒后相关的逻辑)</span><br><span class="line">// selfInterrupt()中断当前线程</span><br><span class="line"> public final void acquire(int arg) &#123;</span><br><span class="line">       if (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">           acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">           selfInterrupt();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>##tryAcquire方法</p><pre><code>    //Reentrantlock中FairSync公平获锁（位于ReentrantLock类的静态内部类Sync中） // 返回true -&gt; 尝试获取锁成功 | 返回false -&gt; 尝试获取锁失败 protected final boolean tryAcquire(int acquires) &#123;        //获取当前线程        final Thread current = Thread.currentThread();        //返回同步状态当前值        int c = getState();        //当c==0时说明处于无锁状态        //hasQueuedPredecessors()判断FIFO队列中是否有排队的线程        //返回true ---&gt; 说明当前队列中有排队的线程,当前线程需要入队等待(!tryAcquire(arg)&amp;&amp;acquireQueued(addWaiter(Node.EXCLUSIVE), arg))        //返回false ---&gt;说明当前队列中没有排队的线程,当前线程可以尝试去获取锁资源        if (c == 0) &#123;            if (!hasQueuedPredecessors() &amp;&amp;              //compareAndSetState(0, acquires)以CAS原子性的方式去修改Status的值            // 返回true ---&gt; 说明status更新成功，成功抢占到了锁资源             // 返回false---&gt; 说明status更新失败，有多个线程存在竞争锁资源,当前线程竞争失败                compareAndSetState(0, acquires)) &#123;            //当队列中既没有排队线程并且当前线程抢占到了锁资源，那么设置当前线程拥有独占访问的权限                setExclusiveOwnerThread(current);            //当前线程获取锁资源成功                return true;            &#125;        &#125;        // * Returns the thread last set by &#123;@code setExclusiveOwnerThread&#125;,or &#123;@code null&#125; if never set        // 进入当前if语句的前提c！=0,说明锁资源被抢占,因为可重入锁的原因,已经获取锁的线程可以再次进入。        else if (current == getExclusiveOwnerThread()) &#123;            //将获取锁资源的次数加上acquires值            int nextc = c + acquires;            //越界判断            if (nextc &lt; 0)                throw new Error(&quot;Maximum lock count exceeded&quot;);            //更新同步状态的值(state = newState  newState为形参值，当前就是nextc)            setState(nextc);            //获取锁资源成功            return true;        &#125;        //1:CAS加锁失败        //2:Staus!=0&amp;&amp;当前线程不是占有锁资源的线程        return false;    &#125;</code></pre> <span id="more"></span><ul><li><p>Reentrantlock中NonfairSync非公平锁</p><pre><code>   final boolean nonfairTryAcquire(int acquires) &#123;      //获取当前线程      final Thread current = Thread.currentThread();      //获取同步状态值      int c = getState();      //此处是公平锁和非公平锁不同的点,非公平锁直接尝试去CAS原子性修改Status值,而非公平锁需要先去判断队列中是否有等待线程      if (c == 0) &#123;          if (compareAndSetState(0, acquires)) &#123;              setExclusiveOwnerThread(current);              return true;          &#125;      &#125;      //可重入锁情况      else if (current == getExclusiveOwnerThread()) &#123;          int nextc = c + acquires;          //越界处理          if (nextc &lt; 0) // overflow              throw new Error(&quot;Maximum lock count exceeded&quot;);          //更新同步状态的值          setState(nextc);          return true;      &#125;      //1:CAS抢占锁资源失败      //2:Staus!=0&amp;&amp;当前线程不是占有锁资源的线程      return false;  &#125;</code></pre></li></ul><p>##addWaiter将当前线程添加到阻塞队列</p><pre><code>private Node addWaiter(Node mode) &#123;    //将当前线程封装为Node结点,mode表示结点的模式(独占(EXCLUSIVE),共享(SHARED))    Node node = new Node(Thread.currentThread(), mode);    //获取队列尾结点    Node pred = tail;    if (pred != null) &#123;        //将当前结点前驱结点设置为pred        node.prev = pred;        //以CAS的方式去修改尾结点        if (compareAndSetTail(pred, node)) &#123;            //  pred &lt;---node            //  pred ---&gt;node 完成双向绑定            pred.next = node;            return node;        &#125;    &#125;    //自旋的方式入队列    //进入自旋的前提条件1:当前队列是空队列  2:CAS修改尾结点失败说明存在多线程竞争    enq(node);    return node;&#125;</code></pre><p>##enq以自旋的方式将node结点入队列</p><pre><code> private Node enq(final Node node) &#123;    //死循环,自旋操作    for (;;) &#123;        //获取尾结点        Node t = tail;        //尾结点为空--&gt;队列为空(CLH queues need a dummy header node to get started)从注释上可以得出,CLH队列启动需要一个虚拟头节点，所以作为第一个node结点需要帮助创建一个head结点,head是真正持有锁的线程        //不过head结点是一个空结点仅仅标识当前有线程占有state,真正标识到底是那个线程持有锁是在exclusiveOwnerThread属性里        if (t == null) &#123; // Must initialize            if (compareAndSetHead(new Node()))                tail = head;        &#125; else &#123;            //当前队列不为空,通过CAS的方式修改尾结点            node.prev = t;            if (compareAndSetTail(t, node)) &#123;                t.next = node;                return t;            &#125;        &#125;    &#125;</code></pre><p>##acquireQueued</p><pre><code>//AQS中真正去竞争锁资源的方法//返回值true表示线程等待时被中断，返回值false未被中断唤醒// if (!tryAcquire(arg) //        &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) //     selfInterrupt();// 当返回true时会执行selfInterrupt()也即是中断当前线程,所以正常情况下应该返回false final boolean acquireQueued(final Node node, int arg) &#123;    boolean failed = true;    try &#123;        //中断标记        boolean interrupted = false;        for (;;) &#123;            //获取当前结点的前驱结点            final Node p = node.predecessor();            //注意，阻塞队列不包含head节点，head指的是占有锁的线程，head后面的才称为阻塞队列            //如果前驱结点为head结点,则尝试获取锁资源            if (p == head &amp;&amp; tryAcquire(arg)) &#123;                setHead(node);                p.next = null; // help GC                // 当前线程获取锁的过程中，没有发生异常                failed = false;                return interrupted;//返回中断标志            &#125;            //shouldParkAfterFailedAcquire()方法判断当前线程是否需要挂起            //parkAndCheckInterrupt()真正执行挂起的方法,底层调用UNSAFE.park来实现挂起            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;                parkAndCheckInterrupt())                //当前线程被唤醒后,将中断标志设置为true,表示当前线程被中断信号唤醒                interrupted = true;        &#125;    &#125; finally &#123;        //什么时候failed为true？        //当tryAcquire(arg)抛出异常时        if (failed)             // node节点的取消线程资源竞争            cancelAcquire(node);    &#125;&#125;</code></pre><p>##shouldParkAfterFailedAcquire判断当前线程获取锁资源失败后是否需要挂起<br>    &#x2F;&#x2F;waitStatus&#x3D;&#x3D;0 默认状态 waitStatus&#x3D;&#x3D;-1(Signal状态–表示当前线程释放锁后会唤醒后继结点)<br>    &#x2F;&#x2F;waitStatus&#x3D;&#x3D;1 结点取消排队(CANCELLED)<br>    &#x2F;&#x2F; 参数1：Node pred 当前线程的前驱节点<br>    &#x2F;&#x2F; 参数2：Node node 封装当前线程的节点<br>     private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {<br>        int ws &#x3D; pred.waitStatus;<br>        if (ws &#x3D;&#x3D; Node.SIGNAL)<br>           &#x2F;&#x2F;如果前驱结点的waitStatus为-1,表示当前结点能获取到唤醒机会,返回ture(然后就可以调用parkAndCheckInterrupt方法被挂起)<br>            return true;<br>        &#x2F;&#x2F;ws&gt;0表示前驱结点已经取消,那么当前结点就需要找一个能让他唤醒的前驱结点<br>        if (ws &gt; 0) {<br>            do {<br>                node.prev &#x3D; pred &#x3D; pred.prev;<br>            } while (pred.waitStatus &gt; 0);<br>            pred.next &#x3D; node;<br>        } else {<br>               &#x2F;&#x2F;当前node前驱节点的状态就是0，即默认状态这种情况<br>            &#x2F;&#x2F; 将当前线程node的前驱节点的状态，强制设置为SIGNAL，表示该节点释放锁后会唤醒它的第一个后驱节点<br>            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br>        }<br>        &#x2F;&#x2F;方法结束,当再次进入当前方法后会进入第一个if语句,表明当前结点能获取到唤醒机会,返回ture(然后就可以调用parkAndCheckInterrupt方法被挂起)<br>        return false;<br>    }</p><p>##parkAndCheckInterrupt()挂起当前线程的方法<br>    &#x2F;&#x2F;挂起方法,让当前线程被挂起,等待被唤醒<br>    &#x2F;&#x2F; 底层调用UNSAFE.park<br>    private final boolean parkAndCheckInterrupt() {<br>        LockSupport.park(this);<br>        return Thread.interrupted();<br>    }</p><p>##release释放锁的逻辑</p><pre><code>public final boolean release(int arg) &#123;    //tryRelease尝试去释放锁    if (tryRelease(arg)) &#123;        //双向链表的头节点,head结点为真正持有锁的结点        Node h = head;        //结点的waitStatus的值什么时候为0？        //对于正常的同步结点,该结点waitStatus的默认值就是0        if (h != null &amp;&amp; h.waitStatus != 0)            unparkSuccessor(h);        return true;    &#125;    return false;&#125;</code></pre><ul><li>线程解锁有三种情况:<br>  *当前线程不在AQS队列中,那么直接进入tryRelease方法尝试去释放锁,并且如果当前不是可重入锁,将当前线程的独占标识去掉,如果是可重入锁则statu的值减一,当statu的值等于0时表明解锁成功</li></ul><p>##tryRelease尝试去释放锁</p><pre><code> protected final boolean tryRelease(int releases) &#123;        //c代表当前线程的statu同步状态值 statu&gt;0表示被线程获取多次,当statu==0时说明当前线程不能持有锁,锁资源应该释放        int c = getState() - releases;        //如果当前线程不是最后获取锁的线程则抛出异常(不是当前持有锁的线程)        if (Thread.currentThread() != getExclusiveOwnerThread())            throw new IllegalMonitorStateException();        //当前线程是否可以完全释放锁        boolean free = false;        //statu==0表示当前线程已经达到完全释放锁的条件        if (c == 0) &#123;            //当前线程可以完全释放锁            free = true;            // 更新当前持锁线程为null            setExclusiveOwnerThread(null);        &#125;        //更新同步状态值        setState(c);        return free;    &#125;</code></pre><p>##unparkSuccessor唤醒结点的后继者</p><pre><code>private void unparkSuccessor(Node node) &#123;    //获取当前结点的waitStatus值    int ws = node.waitStatus;    if (ws &lt; 0)        //将waitStatus的值通过擦拭的方式修改为0,是因为waitStatus = SIGNAL（&lt; -1）或 PROPAGATE（-·3） 只是一个标志，代表在此状态下，后继节点可以唤醒,那么唤醒完后自然可以设置为0。        compareAndSetWaitStatus(node, ws, 0);       //获取结点的后继结点    Node s = node.next;    //s 状态为非空，或者其为取消状态，说明 s 是无效节点,从后往前寻找离当前结点最近的非取消结点    if (s == null || s.waitStatus &gt; 0) &#123;        s = null;        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)            if (t.waitStatus &lt;= 0)                s = t;    &#125;    if (s != null)        LockSupport.unpark(s.thread);//唤醒线程&#125;</code></pre><ul><li>为什么是从后往前遍历呢,从前往后不是更快吗？</li><li><pre><code> node.prev = pred;        if (compareAndSetTail(pred, node)) &#123;            pred.next = node;            return node;        &#125;</code></pre></li><li>1：将node的前驱结点设置为同步队列的尾结点</li><li>2:CAS原子性的去更新同步队列尾结点为node结点</li><li>3:将老的尾结点的后继结点设置为node结点</li><li>从addWaiter将结点加入队列中的代码可知,上述三步操作很明显不是原子性操作，当大量线程执行上述代码只有一个线程能够修改成功完成上述步骤,其余线程就会入下图所示没有老的尾结点到达新尾结点的指针指向,所以综上考虑使用从后往前遍历。</li><li><a href="https://blog.csdn.net/xad669475795/article/details/123455635">adj20博主的图</a><br><img src="http://r95hnmq9s.hn-bkt.clouddn.com/343.png" alt="RUNOOB 图标"></li></ul>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_2022/3/23</title>
      <link href="/2022/03/22/leetcode-2022-3-23/"/>
      <url>/2022/03/22/leetcode-2022-3-23/</url>
      
        <content type="html"><![CDATA[<pre><code>剑指 Offer 34. 二叉树中和为某一值的路径class Solution &#123;List&lt;List&lt;Integer&gt;&gt; list_1 = new LinkedList&lt;&gt;();LinkedList&lt;Integer&gt; list_2 = new LinkedList&lt;&gt;();public List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, int target) &#123;   dfs(root,target);   return list_1;&#125;public void dfs(TreeNode root,int target)&#123;    if(root==null)return;    target-=root.val;   list_2.add(root.val);   if(root.left==null&amp;&amp;root.right==null&amp;&amp;target==0) &#123;     list_1.add(new LinkedList&lt;&gt;(list_2));//不能提前return会导致队列二无法回溯导致结果不对   &#125;   dfs(root.left,target);   dfs(root.right,target);   // target-=root.val;为什么不需要再加上root.val，因为Java是值传递,是将实参复制一份传给函数,在函数里修改并不影响实参,所以加不加都没影响   list_2.removeLast();   return;&#125;&#125;</code></pre><p>##剑指 Offer 29. 顺时针打印矩阵</p><pre><code>class Solution &#123;public int[] spiralOrder(int[][] matrix) &#123;   if(matrix.length==0)return new int[0];   int l = 0,r = matrix[0].length-1,b = matrix.length-1,t = 0 ,x =0  ;    int res[] = new int[(b+1)*(r+1)];    while(true) &#123;        for(int i = l; i &lt;= r; i++) res[x++] = matrix[t][i]; // 从左往右遍历        if(++t &gt; b) break;//边界条件收缩,行数向下收缩t++,如果大于b,结束循环返回        for(int i = t; i &lt;= b; i++) res[x++] = matrix[i][r]; // 从上往下遍历        if(l &gt; --r) break;//边界条件收缩,列数向左搜索        for(int i = r; i &gt;= l; i--) res[x++] = matrix[b][i]; // 从右往左        if(t &gt; --b) break;//边界条件收缩,行数向上收缩        for(int i = b; i &gt;= t; i--) res[x++] = matrix[i][l]; // 从下往上.        if(++l &gt; r) break;//边界条件收缩,列数向右收缩    &#125;    return res;&#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_2022/3/22</title>
      <link href="/2022/03/22/leetcode-2022-3-22/"/>
      <url>/2022/03/22/leetcode-2022-3-22/</url>
      
        <content type="html"><![CDATA[<p>#<em><strong>Whole</strong></em>每日Leetcode</p><ul><li>时间复杂度:遍历数组O(N),交换索引下标值O(1),所以时间复杂度为O(1)</li><li>空间复杂度:常数级常数级额外空间<br>##剑指 Offer 03. 数组中重复的数字<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRepeatNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(i &lt; nums.length) &#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[i] == i) &#123;<span class="comment">//当索引值等于索引列下标值时说明不存在重复元素跳过</span></span><br><span class="line">              i++;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(nums[nums[i]] == nums[i]) <span class="keyword">return</span> nums[i];<span class="comment">//当索引下标下有元素时，并且相同说明找到相同元素</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];<span class="comment">//交换索引对于的值</span></span><br><span class="line">          nums[i] = nums[tmp];</span><br><span class="line">          nums[tmp] = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><ul><li><p>时间复杂度: O(n)的时间复杂度</p></li><li><p>滑动窗口<br>##无重复字符的最长子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;s.length();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(s.charAt(j))) i = Math.max(map.get(s.charAt(j)),i);<span class="comment">//因为相同字符如果在i左边不需要管,只需要考虑在i右边相同的字符串并且跳过</span></span><br><span class="line">              map.put(s.charAt(j),j+<span class="number">1</span>);<span class="comment">//设置value为j+1主要是为了在滑动窗口收缩窗口时，将i变成相同字符右移一位</span></span><br><span class="line">              count = Math.max(j-i+<span class="number">1</span>,count);<span class="comment">//返回长度</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>双重递归<br>##剑指 Offer 26. 树的子结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="comment">//递归处理  前序遍历子树a然后处理每一个节点</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(A==<span class="literal">null</span>||B==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">return</span> isDou(A,B)||isSubStructure(A.left,B)||isSubStructure(A.right,B);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDou</span><span class="params">(TreeNode A,TreeNode B)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(B==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//B树是A的子树，遍历完成</span></span><br><span class="line">      <span class="keyword">if</span>(A==<span class="literal">null</span>||A.val!=B.val)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//当a,b树节点值不相同时或者a树为空时说明b不是a的子节点</span></span><br><span class="line">      <span class="keyword">return</span> isDou(A.left,B.left)&amp;&amp;isDou(A.right,B.right);<span class="comment">//递归处理</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如果是求A中有多少个子结构和B相同，代码如下</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">isSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(A==<span class="literal">null</span>||B==<span class="literal">null</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//边界条件</span></span><br><span class="line">    <span class="keyword">if</span>(isDou(A,B)) count++;<span class="comment">//如果是计数++</span></span><br><span class="line">    isSubStructure(A.left,B);<span class="comment">//递归左子树</span></span><br><span class="line">    isSubStructure(A.right,B);<span class="comment">//递归右子树</span></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDou</span><span class="params">(TreeNode A,TreeNode B)</span>&#123;<span class="comment">//判断B是不是A的子树</span></span><br><span class="line">    <span class="keyword">if</span>(B==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//B树是A的子树，遍历完成</span></span><br><span class="line">    <span class="keyword">if</span>(A==<span class="literal">null</span>||A.val!=B.val)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//说明B不为空并且a为空，或者两值不相等</span></span><br><span class="line">    <span class="keyword">return</span> isDou(A.left,B.left)&amp;&amp;isDou(A.right,B.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
